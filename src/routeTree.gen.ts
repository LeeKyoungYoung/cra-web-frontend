/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as RoutesImport } from './routes/routes';
import { Route as RegisterRoutesImport } from './routes/registerRoutes';
import { Route as RecruitRouteImport } from './routes/recruitRoute';
import { Route as ProjectRouteImport } from './routes/projectRoute';
import { Route as NoticeRoutesImport } from './routes/noticeRoutes';
import { Route as MainRouteImport } from './routes/mainRoute';
import { Route as LoginRouteImport } from './routes/loginRoute';
import { Route as ItemRouteImport } from './routes/itemRoute';
import { Route as IntroRoutesImport } from './routes/introRoutes';
import { Route as HavrutaRoutesImport } from './routes/havrutaRoutes';
import { Route as ErrorRouteImport } from './routes/errorRoute';
import { Route as BookRouteImport } from './routes/bookRoute';
import { Route as AuthRoutesImport } from './routes/authRoutes';
import { Route as AdminRouteImport } from './routes/adminRoute';
import { Route as AdminProjectRoutesImport } from './routes/adminProjectRoutes';
import { Route as AdminItemRoutesImport } from './routes/adminItemRoutes';
import { Route as AdminHavrutaRoutesImport } from './routes/adminHavrutaRoutes';
import { Route as AdminBookRoutesImport } from './routes/adminBookRoutes';
import { Route as AcademicRoutesImport } from './routes/academicRoutes';

// Create/Update Routes

const RoutesRoute = RoutesImport.update({
  id: '/routes',
  path: '/routes',
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoutesRoute = RegisterRoutesImport.update({
  id: '/registerRoutes',
  path: '/registerRoutes',
  getParentRoute: () => rootRoute,
} as any);

const RecruitRouteRoute = RecruitRouteImport.update({
  id: '/recruitRoute',
  path: '/recruitRoute',
  getParentRoute: () => rootRoute,
} as any);

const ProjectRouteRoute = ProjectRouteImport.update({
  id: '/projectRoute',
  path: '/projectRoute',
  getParentRoute: () => rootRoute,
} as any);

const NoticeRoutesRoute = NoticeRoutesImport.update({
  id: '/noticeRoutes',
  path: '/noticeRoutes',
  getParentRoute: () => rootRoute,
} as any);

const MainRouteRoute = MainRouteImport.update({
  id: '/mainRoute',
  path: '/mainRoute',
  getParentRoute: () => rootRoute,
} as any);

const LoginRouteRoute = LoginRouteImport.update({
  id: '/loginRoute',
  path: '/loginRoute',
  getParentRoute: () => rootRoute,
} as any);

const ItemRouteRoute = ItemRouteImport.update({
  id: '/itemRoute',
  path: '/itemRoute',
  getParentRoute: () => rootRoute,
} as any);

const IntroRoutesRoute = IntroRoutesImport.update({
  id: '/introRoutes',
  path: '/introRoutes',
  getParentRoute: () => rootRoute,
} as any);

const HavrutaRoutesRoute = HavrutaRoutesImport.update({
  id: '/havrutaRoutes',
  path: '/havrutaRoutes',
  getParentRoute: () => rootRoute,
} as any);

const ErrorRouteRoute = ErrorRouteImport.update({
  id: '/errorRoute',
  path: '/errorRoute',
  getParentRoute: () => rootRoute,
} as any);

const BookRouteRoute = BookRouteImport.update({
  id: '/bookRoute',
  path: '/bookRoute',
  getParentRoute: () => rootRoute,
} as any);

const AuthRoutesRoute = AuthRoutesImport.update({
  id: '/authRoutes',
  path: '/authRoutes',
  getParentRoute: () => rootRoute,
} as any);

const AdminRouteRoute = AdminRouteImport.update({
  id: '/adminRoute',
  path: '/adminRoute',
  getParentRoute: () => rootRoute,
} as any);

const AdminProjectRoutesRoute = AdminProjectRoutesImport.update({
  id: '/adminProjectRoutes',
  path: '/adminProjectRoutes',
  getParentRoute: () => rootRoute,
} as any);

const AdminItemRoutesRoute = AdminItemRoutesImport.update({
  id: '/adminItemRoutes',
  path: '/adminItemRoutes',
  getParentRoute: () => rootRoute,
} as any);

const AdminHavrutaRoutesRoute = AdminHavrutaRoutesImport.update({
  id: '/adminHavrutaRoutes',
  path: '/adminHavrutaRoutes',
  getParentRoute: () => rootRoute,
} as any);

const AdminBookRoutesRoute = AdminBookRoutesImport.update({
  id: '/adminBookRoutes',
  path: '/adminBookRoutes',
  getParentRoute: () => rootRoute,
} as any);

const AcademicRoutesRoute = AcademicRoutesImport.update({
  id: '/academicRoutes',
  path: '/academicRoutes',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/academicRoutes': {
      id: '/academicRoutes';
      path: '/academicRoutes';
      fullPath: '/academicRoutes';
      preLoaderRoute: typeof AcademicRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/adminBookRoutes': {
      id: '/adminBookRoutes';
      path: '/adminBookRoutes';
      fullPath: '/adminBookRoutes';
      preLoaderRoute: typeof AdminBookRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/adminHavrutaRoutes': {
      id: '/adminHavrutaRoutes';
      path: '/adminHavrutaRoutes';
      fullPath: '/adminHavrutaRoutes';
      preLoaderRoute: typeof AdminHavrutaRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/adminItemRoutes': {
      id: '/adminItemRoutes';
      path: '/adminItemRoutes';
      fullPath: '/adminItemRoutes';
      preLoaderRoute: typeof AdminItemRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/adminProjectRoutes': {
      id: '/adminProjectRoutes';
      path: '/adminProjectRoutes';
      fullPath: '/adminProjectRoutes';
      preLoaderRoute: typeof AdminProjectRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/adminRoute': {
      id: '/adminRoute';
      path: '/adminRoute';
      fullPath: '/adminRoute';
      preLoaderRoute: typeof AdminRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/authRoutes': {
      id: '/authRoutes';
      path: '/authRoutes';
      fullPath: '/authRoutes';
      preLoaderRoute: typeof AuthRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/bookRoute': {
      id: '/bookRoute';
      path: '/bookRoute';
      fullPath: '/bookRoute';
      preLoaderRoute: typeof BookRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/errorRoute': {
      id: '/errorRoute';
      path: '/errorRoute';
      fullPath: '/errorRoute';
      preLoaderRoute: typeof ErrorRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/havrutaRoutes': {
      id: '/havrutaRoutes';
      path: '/havrutaRoutes';
      fullPath: '/havrutaRoutes';
      preLoaderRoute: typeof HavrutaRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/introRoutes': {
      id: '/introRoutes';
      path: '/introRoutes';
      fullPath: '/introRoutes';
      preLoaderRoute: typeof IntroRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/itemRoute': {
      id: '/itemRoute';
      path: '/itemRoute';
      fullPath: '/itemRoute';
      preLoaderRoute: typeof ItemRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/loginRoute': {
      id: '/loginRoute';
      path: '/loginRoute';
      fullPath: '/loginRoute';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/mainRoute': {
      id: '/mainRoute';
      path: '/mainRoute';
      fullPath: '/mainRoute';
      preLoaderRoute: typeof MainRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/noticeRoutes': {
      id: '/noticeRoutes';
      path: '/noticeRoutes';
      fullPath: '/noticeRoutes';
      preLoaderRoute: typeof NoticeRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/projectRoute': {
      id: '/projectRoute';
      path: '/projectRoute';
      fullPath: '/projectRoute';
      preLoaderRoute: typeof ProjectRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/recruitRoute': {
      id: '/recruitRoute';
      path: '/recruitRoute';
      fullPath: '/recruitRoute';
      preLoaderRoute: typeof RecruitRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/registerRoutes': {
      id: '/registerRoutes';
      path: '/registerRoutes';
      fullPath: '/registerRoutes';
      preLoaderRoute: typeof RegisterRoutesImport;
      parentRoute: typeof rootRoute;
    };
    '/routes': {
      id: '/routes';
      path: '/routes';
      fullPath: '/routes';
      preLoaderRoute: typeof RoutesImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/academicRoutes': typeof AcademicRoutesRoute;
  '/adminBookRoutes': typeof AdminBookRoutesRoute;
  '/adminHavrutaRoutes': typeof AdminHavrutaRoutesRoute;
  '/adminItemRoutes': typeof AdminItemRoutesRoute;
  '/adminProjectRoutes': typeof AdminProjectRoutesRoute;
  '/adminRoute': typeof AdminRouteRoute;
  '/authRoutes': typeof AuthRoutesRoute;
  '/bookRoute': typeof BookRouteRoute;
  '/errorRoute': typeof ErrorRouteRoute;
  '/havrutaRoutes': typeof HavrutaRoutesRoute;
  '/introRoutes': typeof IntroRoutesRoute;
  '/itemRoute': typeof ItemRouteRoute;
  '/loginRoute': typeof LoginRouteRoute;
  '/mainRoute': typeof MainRouteRoute;
  '/noticeRoutes': typeof NoticeRoutesRoute;
  '/projectRoute': typeof ProjectRouteRoute;
  '/recruitRoute': typeof RecruitRouteRoute;
  '/registerRoutes': typeof RegisterRoutesRoute;
  '/routes': typeof RoutesRoute;
}

export interface FileRoutesByTo {
  '/academicRoutes': typeof AcademicRoutesRoute;
  '/adminBookRoutes': typeof AdminBookRoutesRoute;
  '/adminHavrutaRoutes': typeof AdminHavrutaRoutesRoute;
  '/adminItemRoutes': typeof AdminItemRoutesRoute;
  '/adminProjectRoutes': typeof AdminProjectRoutesRoute;
  '/adminRoute': typeof AdminRouteRoute;
  '/authRoutes': typeof AuthRoutesRoute;
  '/bookRoute': typeof BookRouteRoute;
  '/errorRoute': typeof ErrorRouteRoute;
  '/havrutaRoutes': typeof HavrutaRoutesRoute;
  '/introRoutes': typeof IntroRoutesRoute;
  '/itemRoute': typeof ItemRouteRoute;
  '/loginRoute': typeof LoginRouteRoute;
  '/mainRoute': typeof MainRouteRoute;
  '/noticeRoutes': typeof NoticeRoutesRoute;
  '/projectRoute': typeof ProjectRouteRoute;
  '/recruitRoute': typeof RecruitRouteRoute;
  '/registerRoutes': typeof RegisterRoutesRoute;
  '/routes': typeof RoutesRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/academicRoutes': typeof AcademicRoutesRoute;
  '/adminBookRoutes': typeof AdminBookRoutesRoute;
  '/adminHavrutaRoutes': typeof AdminHavrutaRoutesRoute;
  '/adminItemRoutes': typeof AdminItemRoutesRoute;
  '/adminProjectRoutes': typeof AdminProjectRoutesRoute;
  '/adminRoute': typeof AdminRouteRoute;
  '/authRoutes': typeof AuthRoutesRoute;
  '/bookRoute': typeof BookRouteRoute;
  '/errorRoute': typeof ErrorRouteRoute;
  '/havrutaRoutes': typeof HavrutaRoutesRoute;
  '/introRoutes': typeof IntroRoutesRoute;
  '/itemRoute': typeof ItemRouteRoute;
  '/loginRoute': typeof LoginRouteRoute;
  '/mainRoute': typeof MainRouteRoute;
  '/noticeRoutes': typeof NoticeRoutesRoute;
  '/projectRoute': typeof ProjectRouteRoute;
  '/recruitRoute': typeof RecruitRouteRoute;
  '/registerRoutes': typeof RegisterRoutesRoute;
  '/routes': typeof RoutesRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/academicRoutes'
    | '/adminBookRoutes'
    | '/adminHavrutaRoutes'
    | '/adminItemRoutes'
    | '/adminProjectRoutes'
    | '/adminRoute'
    | '/authRoutes'
    | '/bookRoute'
    | '/errorRoute'
    | '/havrutaRoutes'
    | '/introRoutes'
    | '/itemRoute'
    | '/loginRoute'
    | '/mainRoute'
    | '/noticeRoutes'
    | '/projectRoute'
    | '/recruitRoute'
    | '/registerRoutes'
    | '/routes';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/academicRoutes'
    | '/adminBookRoutes'
    | '/adminHavrutaRoutes'
    | '/adminItemRoutes'
    | '/adminProjectRoutes'
    | '/adminRoute'
    | '/authRoutes'
    | '/bookRoute'
    | '/errorRoute'
    | '/havrutaRoutes'
    | '/introRoutes'
    | '/itemRoute'
    | '/loginRoute'
    | '/mainRoute'
    | '/noticeRoutes'
    | '/projectRoute'
    | '/recruitRoute'
    | '/registerRoutes'
    | '/routes';
  id:
    | '__root__'
    | '/academicRoutes'
    | '/adminBookRoutes'
    | '/adminHavrutaRoutes'
    | '/adminItemRoutes'
    | '/adminProjectRoutes'
    | '/adminRoute'
    | '/authRoutes'
    | '/bookRoute'
    | '/errorRoute'
    | '/havrutaRoutes'
    | '/introRoutes'
    | '/itemRoute'
    | '/loginRoute'
    | '/mainRoute'
    | '/noticeRoutes'
    | '/projectRoute'
    | '/recruitRoute'
    | '/registerRoutes'
    | '/routes';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AcademicRoutesRoute: typeof AcademicRoutesRoute;
  AdminBookRoutesRoute: typeof AdminBookRoutesRoute;
  AdminHavrutaRoutesRoute: typeof AdminHavrutaRoutesRoute;
  AdminItemRoutesRoute: typeof AdminItemRoutesRoute;
  AdminProjectRoutesRoute: typeof AdminProjectRoutesRoute;
  AdminRouteRoute: typeof AdminRouteRoute;
  AuthRoutesRoute: typeof AuthRoutesRoute;
  BookRouteRoute: typeof BookRouteRoute;
  ErrorRouteRoute: typeof ErrorRouteRoute;
  HavrutaRoutesRoute: typeof HavrutaRoutesRoute;
  IntroRoutesRoute: typeof IntroRoutesRoute;
  ItemRouteRoute: typeof ItemRouteRoute;
  LoginRouteRoute: typeof LoginRouteRoute;
  MainRouteRoute: typeof MainRouteRoute;
  NoticeRoutesRoute: typeof NoticeRoutesRoute;
  ProjectRouteRoute: typeof ProjectRouteRoute;
  RecruitRouteRoute: typeof RecruitRouteRoute;
  RegisterRoutesRoute: typeof RegisterRoutesRoute;
  RoutesRoute: typeof RoutesRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AcademicRoutesRoute: AcademicRoutesRoute,
  AdminBookRoutesRoute: AdminBookRoutesRoute,
  AdminHavrutaRoutesRoute: AdminHavrutaRoutesRoute,
  AdminItemRoutesRoute: AdminItemRoutesRoute,
  AdminProjectRoutesRoute: AdminProjectRoutesRoute,
  AdminRouteRoute: AdminRouteRoute,
  AuthRoutesRoute: AuthRoutesRoute,
  BookRouteRoute: BookRouteRoute,
  ErrorRouteRoute: ErrorRouteRoute,
  HavrutaRoutesRoute: HavrutaRoutesRoute,
  IntroRoutesRoute: IntroRoutesRoute,
  ItemRouteRoute: ItemRouteRoute,
  LoginRouteRoute: LoginRouteRoute,
  MainRouteRoute: MainRouteRoute,
  NoticeRoutesRoute: NoticeRoutesRoute,
  ProjectRouteRoute: ProjectRouteRoute,
  RecruitRouteRoute: RecruitRouteRoute,
  RegisterRoutesRoute: RegisterRoutesRoute,
  RoutesRoute: RoutesRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/academicRoutes",
        "/adminBookRoutes",
        "/adminHavrutaRoutes",
        "/adminItemRoutes",
        "/adminProjectRoutes",
        "/adminRoute",
        "/authRoutes",
        "/bookRoute",
        "/errorRoute",
        "/havrutaRoutes",
        "/introRoutes",
        "/itemRoute",
        "/loginRoute",
        "/mainRoute",
        "/noticeRoutes",
        "/projectRoute",
        "/recruitRoute",
        "/registerRoutes",
        "/routes"
      ]
    },
    "/academicRoutes": {
      "filePath": "academicRoutes.ts"
    },
    "/adminBookRoutes": {
      "filePath": "adminBookRoutes.ts"
    },
    "/adminHavrutaRoutes": {
      "filePath": "adminHavrutaRoutes.ts"
    },
    "/adminItemRoutes": {
      "filePath": "adminItemRoutes.ts"
    },
    "/adminProjectRoutes": {
      "filePath": "adminProjectRoutes.ts"
    },
    "/adminRoute": {
      "filePath": "adminRoute.ts"
    },
    "/authRoutes": {
      "filePath": "authRoutes.ts"
    },
    "/bookRoute": {
      "filePath": "bookRoute.ts"
    },
    "/errorRoute": {
      "filePath": "errorRoute.ts"
    },
    "/havrutaRoutes": {
      "filePath": "havrutaRoutes.ts"
    },
    "/introRoutes": {
      "filePath": "introRoutes.ts"
    },
    "/itemRoute": {
      "filePath": "itemRoute.ts"
    },
    "/loginRoute": {
      "filePath": "loginRoute.ts"
    },
    "/mainRoute": {
      "filePath": "mainRoute.ts"
    },
    "/noticeRoutes": {
      "filePath": "noticeRoutes.ts"
    },
    "/projectRoute": {
      "filePath": "projectRoute.ts"
    },
    "/recruitRoute": {
      "filePath": "recruitRoute.ts"
    },
    "/registerRoutes": {
      "filePath": "registerRoutes.ts"
    },
    "/routes": {
      "filePath": "routes.ts"
    }
  }
}
ROUTE_MANIFEST_END */
